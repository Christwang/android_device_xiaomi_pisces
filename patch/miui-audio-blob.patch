project frameworks/av/
diff --git a/services/audiopolicy/AudioPolicyClientImplLegacy.cpp b/services/audiopolicy/AudioPolicyClientImplLegacy.cpp
index 388ddaa..525a2a8 100644
--- a/frameworks/av/services/audiopolicy/AudioPolicyClientImplLegacy.cpp
+++ b/frameworks/av/services/audiopolicy/AudioPolicyClientImplLegacy.cpp
@@ -309,6 +309,22 @@ int aps_set_voice_volume(void *service, float volume, int delay_ms)
     return audioPolicyService->setVoiceVolume(volume, delay_ms);
 }
 
+#ifdef HAVE_MIUI_AUDIO_BLOB
+int aps_set_mode(void *service, audio_mode_t mode, int unknown)
+{
+    AudioPolicyService *audioPolicyService = (AudioPolicyService *)service;
+
+    return audioPolicyService->setMode(mode, unknown);
+}
+
+int aps_set_fm_volume(void *service, float volume, int delay_ms)
+{
+    AudioPolicyService *audioPolicyService = (AudioPolicyService *)service;
+
+    return audioPolicyService->setFmVolume(volume, delay_ms);
+}
+#endif
+
 }; // extern "C"
 
 }; // namespace android
diff --git a/services/audiopolicy/AudioPolicyService.cpp b/services/audiopolicy/AudioPolicyService.cpp
index 9006e49..5daf592 100644
--- a/frameworks/av/services/audiopolicy/AudioPolicyService.cpp
+++ b/frameworks/av/services/audiopolicy/AudioPolicyService.cpp
@@ -988,6 +988,20 @@ int AudioPolicyService::setVoiceVolume(float volume, int delayMs)
     return (int)mAudioCommandThread->voiceVolumeCommand(volume, delayMs);
 }
 
+#ifdef HAVE_MIUI_AUDIO_BLOB
+int AudioPolicyService::setMode(audio_mode_t mode, int unknown)
+{
+    ALOGD("unsupported AudioPolicyService::setMode(%d, %d)", (int) mode, unknown);
+    return PERMISSION_DENIED;
+}
+
+int AudioPolicyService::setFmVolume(float volume, int delayMs)
+{
+    ALOGD("unsupported AudioPolicyService::setFmVolume(%f, %d)", (double) volume, delayMs);
+    return PERMISSION_DENIED;
+}
+#endif
+
 extern "C" {
 audio_module_handle_t aps_load_hw_module(void *service __unused,
                                              const char *name);
@@ -1042,6 +1056,10 @@ int aps_start_tone(void *service, audio_policy_tone_t tone,
                               audio_stream_type_t stream);
 int aps_stop_tone(void *service);
 int aps_set_voice_volume(void *service, float volume, int delay_ms);
+#ifdef HAVE_MIUI_AUDIO_BLOB
+int aps_set_mode(void *service, audio_mode_t mode, int unknown);
+int aps_set_fm_volume(void *service, float volume, int delay_ms);
+#endif
 };
 
 namespace {
@@ -1064,6 +1082,10 @@ namespace {
         .load_hw_module        = aps_load_hw_module,
         .open_output_on_module = aps_open_output_on_module,
         .open_input_on_module  = aps_open_input_on_module,
+#ifdef HAVE_MIUI_AUDIO_BLOB
+        .set_mode              = aps_set_mode,
+        .set_fm_volume         = aps_set_fm_volume,
+#endif
     };
 }; // namespace <unnamed>
 
diff --git a/services/audiopolicy/AudioPolicyService.h b/services/audiopolicy/AudioPolicyService.h
index 2e32bd0..745694f 100644
--- a/frameworks/av/services/audiopolicy/AudioPolicyService.h
+++ b/frameworks/av/services/audiopolicy/AudioPolicyService.h
@@ -155,6 +155,10 @@ public:
     virtual status_t stopTone();
     virtual status_t setVoiceVolume(float volume, int delayMs = 0);
     virtual bool isOffloadSupported(const audio_offload_info_t &config);
+#ifdef HAVE_MIUI_AUDIO_BLOB
+    virtual status_t setMode(audio_mode_t mode, int unknown = 0);
+    virtual status_t setFmVolume(float volume, int delayMs = 0);
+#endif
 
     virtual status_t listAudioPorts(audio_port_role_t role,
                                     audio_port_type_t type,
project hardware/libhardware/
diff --git a/include/hardware/audio_policy.h b/include/hardware/audio_policy.h
index bfaef3b..47954a5 100644
--- a/hardware/libhardware/include/hardware/audio_policy.h
+++ b/hardware/libhardware/include/hardware/audio_policy.h
@@ -415,6 +415,16 @@ struct audio_policy_service_ops {
                                     audio_format_t *pFormat,
                                     audio_channel_mask_t *pChannelMask);
 
+#ifdef HAVE_MIUI_AUDIO_BLOB
+    int (*set_mode)(void *service,
+                    audio_mode_t mode,
+                    int unknown);
+
+    int (*set_fm_volume)(void *service,
+                         float volume,
+                         int delay_ms);
+#endif
+
 };
 
 /**********************************************************************/

diff --git a/include/hardware/audio.h b/include/hardware/audio.h
index 23f28b2..8b55b28 100644
--- a/hardware/libhardware/include/hardware/audio.h
+++ b/hardware/libhardware/include/hardware/audio.h
@@ -698,6 +698,11 @@ struct audio_hw_device {
      */
     int (*get_master_mute)(struct audio_hw_device *dev, bool *mute);
 
+#ifdef HAVE_MIUI_AUDIO_BLOB
+    /** MIUI blob, set fm volume */
+    int (*set_fm_volume)(struct audio_hw_device *dev, float volume, int delay_ms);
+#endif
+
     /**
      * Routing control
      */
project hardware/libhardware_legacy/
diff --git a/audio/AudioPolicyCompatClient.cpp b/audio/AudioPolicyCompatClient.cpp
index 162968c..c1bbe9a 100644
--- a/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.cpp
+++ b/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.cpp
@@ -146,4 +146,16 @@ status_t AudioPolicyCompatClient::setVoiceVolume(float volume, int delayMs)
     return mServiceOps->set_voice_volume(mService, volume, delayMs);
 }
 
+#ifdef HAVE_MIUI_AUDIO_BLOB
+status_t AudioPolicyCompatClient::setMode(audio_mode_t mode, int unknown)
+{
+    return mServiceOps->set_mode(mService, mode, unknown);
+}
+
+status_t AudioPolicyCompatClient::setFmVolume(float volume, int delayMs)
+{
+    return mServiceOps->set_fm_volume(mService, volume, delayMs);
+}
+#endif
+
 }; // namespace android_audio_legacy
diff --git a/audio/AudioPolicyCompatClient.h b/audio/AudioPolicyCompatClient.h
index 494c8af..6e9750b 100644
--- a/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.h
+++ b/hardware/libhardware_legacy/audio/AudioPolicyCompatClient.h
@@ -73,6 +73,11 @@ public:
     virtual status_t stopTone();
     virtual status_t setVoiceVolume(float volume, int delayMs = 0);
 
+#ifdef HAVE_MIUI_AUDIO_BLOB
+    virtual status_t setMode(audio_mode_t mode, int);
+    virtual status_t setFmVolume(float volume, int delayMs = 0);
+#endif
+
 private:
     struct audio_policy_service_ops* mServiceOps;
     void*                            mService;
diff --git a/include/hardware_legacy/AudioPolicyInterface.h b/include/hardware_legacy/AudioPolicyInterface.h
index 7847bdd..f557e5a 100644
--- a/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyInterface.h
+++ b/hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyInterface.h
@@ -252,6 +252,10 @@ public:
                                      audio_io_handle_t srcOutput,
                                      audio_io_handle_t dstOutput) = 0;
 
+#ifdef HAVE_MIUI_AUDIO_BLOB
+    virtual status_t setMode(audio_mode_t, int) = 0;
+    virtual status_t setFmVolume(float volume, int delayMs = 0) = 0;
+#endif
 };
 
 extern "C" AudioPolicyInterface* createAudioPolicyManager(AudioPolicyClientInterface *clientInterface);

diff --git a/include/tinyalsa/asoundlib.h b/include/tinyalsa/asoundlib.h
index 75e5cda..759d805 100644
--- a/external/tinyalsa/include/tinyalsa/asoundlib.h
+++ b/external/tinyalsa/include/tinyalsa/asoundlib.h
@@ -115,10 +115,12 @@ struct pcm_config {
 /* PCM parameters */
 enum pcm_param
 {
+#ifndef HAVE_MIUI_AUDIO_BLOB
     /* mask parameters */
     PCM_PARAM_ACCESS,
     PCM_PARAM_FORMAT,
     PCM_PARAM_SUBFORMAT,
+#endif
     /* interval parameters */
     PCM_PARAM_SAMPLE_BITS,
     PCM_PARAM_FRAME_BITS,
@@ -132,6 +134,12 @@ enum pcm_param
     PCM_PARAM_BUFFER_SIZE,
     PCM_PARAM_BUFFER_BYTES,
     PCM_PARAM_TICK_TIME,
+#ifdef HAVE_MIUI_AUDIO_BLOB
+    /* mask parameters */
+    PCM_PARAM_ACCESS,
+    PCM_PARAM_FORMAT,
+    PCM_PARAM_SUBFORMAT,
+#endif
 };
 
 /* Mixer control types */
